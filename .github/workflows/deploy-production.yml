name: Deploy to Production

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  NODE_VERSION: '18.x'
  REGISTRY: smlgptregistry.azurecr.io
  IMAGE_NAME_BACKEND: smlgpt-backend
  IMAGE_NAME_FRONTEND: smlgpt-frontend

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: security-scan
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json
      
      # Backend tests
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci
      
      - name: Run backend linter
        working-directory: ./backend
        run: npm run lint
      
      - name: Run backend tests
        working-directory: ./backend
        env:
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
        run: npm test -- --coverage
      
      - name: Upload backend coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage/lcov.info
          flags: backend
      
      # Frontend tests
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run frontend linter
        working-directory: ./frontend
        run: npm run lint
      
      - name: Run frontend tests
        working-directory: ./frontend
        run: npm test -- --coverage
      
      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./frontend/coverage/lcov.info
          flags: frontend

  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: build-and-test
    outputs:
      backend-image: ${{ steps.meta.outputs.backend-image }}
      frontend-image: ${{ steps.meta.outputs.frontend-image }}
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      
      - name: Extract metadata
        id: meta
        run: |
          # Generate image tags
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=${GITHUB_SHA::8}
          fi
          
          echo "backend-image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${VERSION}" >> $GITHUB_OUTPUT
          echo "frontend-image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${VERSION}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ steps.meta.outputs.backend-image }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
      
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ steps.meta.outputs.frontend-image }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-images
    environment: 
      name: production
      url: https://yourdomain.com
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      
      - name: Get AKS credentials
        run: |
          az aks get-credentials --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}
      
      - name: Create namespace if not exists
        run: |
          kubectl apply -f k8s/namespace.yaml
      
      - name: Create secrets
        env:
          AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
          AZURE_COMPUTER_VISION_KEY: ${{ secrets.AZURE_COMPUTER_VISION_KEY }}
          AZURE_DOCUMENT_INTELLIGENCE_KEY: ${{ secrets.AZURE_DOCUMENT_INTELLIGENCE_KEY }}
          AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}
          AZURE_SEARCH_API_KEY: ${{ secrets.AZURE_SEARCH_API_KEY }}
          AZURE_SPEECH_KEY: ${{ secrets.AZURE_SPEECH_KEY }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: |
          kubectl create secret generic azure-secrets \
            --namespace=smlgpt \
            --from-literal=azure-openai-api-key="${AZURE_OPENAI_API_KEY}" \
            --from-literal=azure-computer-vision-key="${AZURE_COMPUTER_VISION_KEY}" \
            --from-literal=azure-document-intelligence-key="${AZURE_DOCUMENT_INTELLIGENCE_KEY}" \
            --from-literal=azure-storage-connection-string="${AZURE_STORAGE_CONNECTION_STRING}" \
            --from-literal=azure-search-api-key="${AZURE_SEARCH_API_KEY}" \
            --from-literal=azure-speech-key="${AZURE_SPEECH_KEY}" \
            --from-literal=jwt-secret="${JWT_SECRET}" \
            --dry-run=client -o yaml | kubectl apply -f -
      
      - name: Update image tags in Kubernetes manifests
        run: |
          sed -i "s|smlgptregistry.azurecr.io/smlgpt-backend:latest|${{ needs.build-images.outputs.backend-image }}|g" k8s/backend.yaml
          sed -i "s|smlgptregistry.azurecr.io/smlgpt-frontend:latest|${{ needs.build-images.outputs.frontend-image }}|g" k8s/frontend.yaml
      
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/redis.yaml
          kubectl apply -f k8s/backend.yaml
          kubectl apply -f k8s/frontend.yaml
          kubectl apply -f k8s/ingress.yaml
          kubectl apply -f k8s/hpa.yaml
          kubectl apply -f k8s/monitoring.yaml
      
      - name: Wait for deployment rollout
        run: |
          kubectl rollout status deployment/backend -n smlgpt --timeout=600s
          kubectl rollout status deployment/frontend -n smlgpt --timeout=600s
      
      - name: Run smoke tests
        run: |
          # Wait for service to be ready
          kubectl wait --for=condition=available --timeout=300s deployment/backend -n smlgpt
          
          # Get service URL
          BACKEND_URL=$(kubectl get svc backend -n smlgpt -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          
          # Run health check
          curl -f http://${BACKEND_URL}:5000/health || exit 1
          
          echo "Deployment successful! ðŸš€"
      
      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
